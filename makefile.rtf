{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf500
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\csgray\c0;}
\margl1440\margr1440\vieww14400\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 IMPORTANT: All RFC file names should take the form <4 digit RFCs number><file name all underscores>.txt with no special characters.\
\
Example: 8537updates_to_the_fast_reroute_procedures_for_co_routed_associated_bidirectional_label_switched_paths_lsps.txt\
\
To fulfill the testing requirements, open three terminal windows.\
\
In the first window, navigate to the location of the docker-compose.yml file and execute the following command:\
\
docker-compose up\
\
Doing so will bring the registration server, and the two peers, and allow them to submit/receive requests. A nice byproduct of this process is that the terminal in which the command was run, will present color coded output from all three servers running.\
\
After ensuring that the the server is ready to receive information in the first terminal (you will be presented with a blank line and blinking courser), open the next terminal and run the following command:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\fs22 \cf2 \CocoaLigature0 docker exec -it p2p_peerclient1_1 python3 /var/opt/src/imports/client.py\
\
Doing so will bring up the client program which is simply a while loop, ready to accept user input. As can be see from the command, this client process is serving the first peer \'93p2p_peerclient1_1\'94.\
\
Once complete, perform similar steps with the following command in a new terminal to open the client process for the second peer \'93p2p_peerclient2_1\'94:\
\
docker exec -it p2p_peerclient2_1 python3 /var/opt/src/imports/client.py\
\
As in the first case, you will now see a prompt come up that will allow you to control the function of the peer.\
\
After a message is submitted, you will be presented with output that will label both the transmitted message and the response. Some of the messages will not have a response as they are simply necessary to communicate to the peer itself.\
\
Should the servers need to be torn down, you can simply run the following command after the servers are exited with CTRL + C:\
\
docker-compose down\
\
This will remove all containers/images that have to do with this stack.\
\
As an aside, if you do not want to enter the while loop for each server, you can simply provide the argument you want to submit to the client. An example of such a request is below.\
\
docker exec -it p2p_peerclient1_1 python3 /var/opt/src/imports/client.py REGISTER\
\
Finally, the RFC files that are to be tested, can be copied (with the appropriate naming structure) to each peers respective RFCs folder which is located just under each peers root.}